{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNativeGestureHandler = require(\"react-native-gesture-handler\");\n\nvar _subject = _interopRequireDefault(require(\"./context/subject\"));\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\merge\\\\please-attendence\\\\src\\\\components\\\\AddSubject.js\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar SubjectInput = function SubjectInput() {\n  var _useState = (0, _react.useState)(0),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      count = _useState2[0],\n      setcount = _useState2[1];\n\n  var _useContext = (0, _react.useContext)(_subject.default),\n      dispatch = _useContext.dispatch;\n\n  return _react.default.createElement(_reactNativeGestureHandler.TextInput, {\n    value: count,\n    onChangeText: function onChangeText(text) {\n      return setcount(text);\n    },\n    onSubmitEditing: function onSubmitEditing() {\n      dispatch(count);\n      setcount();\n    },\n    placeholder: \"How many lectures do you take?\",\n    autoCapitalize: \"none\",\n    autoCorrect: false,\n    returnKeyType: \"done\",\n    keyboardType: \"number-pad\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  });\n};\n\nvar _default = SubjectInput;\nexports.default = _default;","map":{"version":3,"sources":["D:/merge/please-attendence/src/components/AddSubject.js"],"names":["SubjectInput","count","setcount","SubjectContext","dispatch","text"],"mappings":";;;;;;;;;AAGA;;AACA;;AACA;;;;;;;;;AAGA,IAAMA,YAAY,GAAG,SAAfA,YAAe,GAAM;AACvB,kBAA0B,qBAAS,CAAT,CAA1B;AAAA;AAAA,MAAOC,KAAP;AAAA,MAAcC,QAAd;;AACA,oBAAmB,uBAAWC,gBAAX,CAAnB;AAAA,MAAOC,QAAP,eAAOA,QAAP;;AAEA,SACI,6BAAC,oCAAD;AACI,IAAA,KAAK,EAAIH,KADb;AAEI,IAAA,YAAY,EAAI,sBAAAI,IAAI;AAAA,aAAIH,QAAQ,CAACG,IAAD,CAAZ;AAAA,KAFxB;AAGI,IAAA,eAAe,EAAI,2BAAM;AACrBD,MAAAA,QAAQ,CAACH,KAAD,CAAR;AACAC,MAAAA,QAAQ;AACX,KANL;AAOI,IAAA,WAAW,EAAG,gCAPlB;AAQI,IAAA,cAAc,EAAG,MARrB;AASI,IAAA,WAAW,EAAI,KATnB;AAUI,IAAA,aAAa,EAAG,MAVpB;AAWI,IAAA,YAAY,EAAG,YAXnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAeH,CAnBD;;eAqBeF,Y","sourcesContent":["// AddSubject.js\r\n// Subject의 값을 추가하는 Componenet입니다.\r\n\r\nimport React, { useContext } from 'react';\r\nimport { TextInput } from 'react-native-gesture-handler';\r\nimport SubjectContext from './context/subject';\r\nimport { useState } from 'react';\r\n\r\nconst SubjectInput = () => {\r\n    const [count, setcount] = useState(0);\r\n    const {dispatch} = useContext(SubjectContext);\r\n\r\n    return(\r\n        <TextInput \r\n            value = {count}\r\n            onChangeText = {text => setcount(text)}\r\n            onSubmitEditing = {() => {\r\n                dispatch(count);\r\n                setcount();\r\n            }}\r\n            placeholder = \"How many lectures do you take?\"\r\n            autoCapitalize = \"none\"\r\n            autoCorrect = {false}\r\n            returnKeyType = \"done\"\r\n            keyboardType = \"number-pad\"\r\n        />\r\n    )\r\n}\r\n\r\nexport default SubjectInput;"]},"metadata":{},"sourceType":"script"}